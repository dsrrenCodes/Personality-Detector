{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91718,"databundleVersionId":12738969,"sourceType":"competition"},{"sourceId":12336995,"sourceType":"datasetVersion","datasetId":7777099}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/darrentanzhijie/intovert-extrovert-binary-classifier?scriptVersionId=252716609\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-27T05:28:47.396505Z","iopub.execute_input":"2025-07-27T05:28:47.396961Z","iopub.status.idle":"2025-07-27T05:28:48.786782Z","shell.execute_reply.started":"2025-07-27T05:28:47.396923Z","shell.execute_reply":"2025-07-27T05:28:48.785763Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"import sklearn\nprint('The scikit-learn version is {}.'.format(sklearn.__version__))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T05:57:25.151344Z","iopub.execute_input":"2025-07-27T05:57:25.151759Z","iopub.status.idle":"2025-07-27T05:57:25.157441Z","shell.execute_reply.started":"2025-07-27T05:57:25.15173Z","shell.execute_reply":"2025-07-27T05:57:25.156441Z"}},"outputs":[{"name":"stdout","text":"The scikit-learn version is 1.2.2.\n","output_type":"stream"}],"execution_count":44},{"cell_type":"code","source":"train_df=pd.read_csv('/kaggle/input/playground-series-s5e7/train.csv')\ndatasert_df= pd.read_csv('/kaggle/input/extrovert-vs-introvert-behavior-data-backup/personality_datasert.csv')\ntest_df=pd.read_csv('/kaggle/input/playground-series-s5e7/test.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T05:28:48.788177Z","iopub.execute_input":"2025-07-27T05:28:48.788761Z","iopub.status.idle":"2025-07-27T05:28:48.87704Z","shell.execute_reply.started":"2025-07-27T05:28:48.788724Z","shell.execute_reply":"2025-07-27T05:28:48.876048Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"test_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T05:28:48.878156Z","iopub.execute_input":"2025-07-27T05:28:48.87881Z","iopub.status.idle":"2025-07-27T05:28:48.921884Z","shell.execute_reply.started":"2025-07-27T05:28:48.878777Z","shell.execute_reply":"2025-07-27T05:28:48.920927Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"         id  Time_spent_Alone Stage_fear  Social_event_attendance  \\\n0     18524               3.0         No                      7.0   \n1     18525               NaN        Yes                      0.0   \n2     18526               3.0         No                      5.0   \n3     18527               3.0         No                      4.0   \n4     18528               9.0        Yes                      1.0   \n...     ...               ...        ...                      ...   \n6170  24694               3.0         No                      5.0   \n6171  24695               8.0        Yes                      2.0   \n6172  24696               2.0         No                      4.0   \n6173  24697               3.0         No                      4.0   \n6174  24698               NaN        Yes                      1.0   \n\n      Going_outside Drained_after_socializing  Friends_circle_size  \\\n0               4.0                        No                  6.0   \n1               0.0                       Yes                  5.0   \n2               6.0                        No                 15.0   \n3               4.0                        No                  5.0   \n4               2.0                       Yes                  1.0   \n...             ...                       ...                  ...   \n6170            5.0                        No                  9.0   \n6171            1.0                       Yes                  0.0   \n6172            3.0                        No                  9.0   \n6173            4.0                        No                 11.0   \n6174            1.0                       Yes                  1.0   \n\n      Post_frequency  \n0                NaN  \n1                1.0  \n2                9.0  \n3                6.0  \n4                1.0  \n...              ...  \n6170             6.0  \n6171             0.0  \n6172             7.0  \n6173             9.0  \n6174             0.0  \n\n[6175 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Time_spent_Alone</th>\n      <th>Stage_fear</th>\n      <th>Social_event_attendance</th>\n      <th>Going_outside</th>\n      <th>Drained_after_socializing</th>\n      <th>Friends_circle_size</th>\n      <th>Post_frequency</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>18524</td>\n      <td>3.0</td>\n      <td>No</td>\n      <td>7.0</td>\n      <td>4.0</td>\n      <td>No</td>\n      <td>6.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>18525</td>\n      <td>NaN</td>\n      <td>Yes</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>Yes</td>\n      <td>5.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18526</td>\n      <td>3.0</td>\n      <td>No</td>\n      <td>5.0</td>\n      <td>6.0</td>\n      <td>No</td>\n      <td>15.0</td>\n      <td>9.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>18527</td>\n      <td>3.0</td>\n      <td>No</td>\n      <td>4.0</td>\n      <td>4.0</td>\n      <td>No</td>\n      <td>5.0</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>18528</td>\n      <td>9.0</td>\n      <td>Yes</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>Yes</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>6170</th>\n      <td>24694</td>\n      <td>3.0</td>\n      <td>No</td>\n      <td>5.0</td>\n      <td>5.0</td>\n      <td>No</td>\n      <td>9.0</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>6171</th>\n      <td>24695</td>\n      <td>8.0</td>\n      <td>Yes</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>Yes</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>6172</th>\n      <td>24696</td>\n      <td>2.0</td>\n      <td>No</td>\n      <td>4.0</td>\n      <td>3.0</td>\n      <td>No</td>\n      <td>9.0</td>\n      <td>7.0</td>\n    </tr>\n    <tr>\n      <th>6173</th>\n      <td>24697</td>\n      <td>3.0</td>\n      <td>No</td>\n      <td>4.0</td>\n      <td>4.0</td>\n      <td>No</td>\n      <td>11.0</td>\n      <td>9.0</td>\n    </tr>\n    <tr>\n      <th>6174</th>\n      <td>24698</td>\n      <td>NaN</td>\n      <td>Yes</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>Yes</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>6175 rows Ã— 8 columns</p>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"train_df=pd.read_csv('/kaggle/input/playground-series-s5e7/train.csv')\ndatasert_df= pd.read_csv('/kaggle/input/extrovert-vs-introvert-behavior-data-backup/personality_datasert.csv')\ntest_df=pd.read_csv('/kaggle/input/playground-series-s5e7/test.csv')\n\ndatasert_df = (\n    datasert_df\n    .rename(columns={'Personality': 'match_p'})\n    .drop_duplicates(['Time_spent_Alone', 'Stage_fear', 'Social_event_attendance',\n                      'Going_outside', 'Drained_after_socializing', \n                      'Friends_circle_size', 'Post_frequency'])\n)\n\nmerge_cols = ['Time_spent_Alone', 'Stage_fear', 'Social_event_attendance',\n              'Going_outside', 'Drained_after_socializing', \n              'Friends_circle_size', 'Post_frequency']\n\ntrain_df = train_df.merge(datasert_df, how='left', on=merge_cols)\ntest_df = test_df.merge(datasert_df, how='left', on=merge_cols)\n\ntrain_df['Personality'] = train_df['Personality'].replace({'Extrovert': 1, 'Introvert': 0})\n\ntrain_ID = train_df['id']\ntest_ID = test_df['id']\n\ntrain_df.drop(columns=['id','match_p'],inplace=True)\ntest_df.drop(columns=['id','match_p'],inplace=True)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T05:28:48.922808Z","iopub.execute_input":"2025-07-27T05:28:48.923091Z","iopub.status.idle":"2025-07-27T05:28:49.032496Z","shell.execute_reply.started":"2025-07-27T05:28:48.923067Z","shell.execute_reply":"2025-07-27T05:28:49.03145Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"train_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T06:14:22.920433Z","iopub.execute_input":"2025-07-27T06:14:22.921572Z","iopub.status.idle":"2025-07-27T06:14:22.94109Z","shell.execute_reply.started":"2025-07-27T06:14:22.921536Z","shell.execute_reply":"2025-07-27T06:14:22.940135Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"       Time_spent_Alone Stage_fear  Social_event_attendance  Going_outside  \\\n0                   0.0         No                      6.0            4.0   \n1                   1.0         No                      7.0            3.0   \n2                   6.0        Yes                      1.0            0.0   \n3                   3.0         No                      7.0            3.0   \n4                   1.0         No                      4.0            4.0   \n...                 ...        ...                      ...            ...   \n18519               3.0         No                      7.0            3.0   \n18520               1.0        NaN                      6.0            7.0   \n18521               7.0        Yes                      1.0            1.0   \n18522               NaN        Yes                      1.0            0.0   \n18523               1.0         No                      8.0            6.0   \n\n      Drained_after_socializing  Friends_circle_size  Post_frequency  \\\n0                            No                 15.0             5.0   \n1                            No                 10.0             8.0   \n2                           NaN                  3.0             0.0   \n3                            No                 11.0             5.0   \n4                            No                 13.0             NaN   \n...                         ...                  ...             ...   \n18519                        No                  9.0             7.0   \n18520                        No                  6.0             5.0   \n18521                       Yes                  1.0             NaN   \n18522                       Yes                  5.0             2.0   \n18523                        No                  4.0             7.0   \n\n       Personality  \n0                1  \n1                1  \n2                0  \n3                1  \n4                1  \n...            ...  \n18519            1  \n18520            1  \n18521            0  \n18522            0  \n18523            1  \n\n[18524 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Time_spent_Alone</th>\n      <th>Stage_fear</th>\n      <th>Social_event_attendance</th>\n      <th>Going_outside</th>\n      <th>Drained_after_socializing</th>\n      <th>Friends_circle_size</th>\n      <th>Post_frequency</th>\n      <th>Personality</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.0</td>\n      <td>No</td>\n      <td>6.0</td>\n      <td>4.0</td>\n      <td>No</td>\n      <td>15.0</td>\n      <td>5.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>No</td>\n      <td>7.0</td>\n      <td>3.0</td>\n      <td>No</td>\n      <td>10.0</td>\n      <td>8.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>6.0</td>\n      <td>Yes</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3.0</td>\n      <td>No</td>\n      <td>7.0</td>\n      <td>3.0</td>\n      <td>No</td>\n      <td>11.0</td>\n      <td>5.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1.0</td>\n      <td>No</td>\n      <td>4.0</td>\n      <td>4.0</td>\n      <td>No</td>\n      <td>13.0</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>18519</th>\n      <td>3.0</td>\n      <td>No</td>\n      <td>7.0</td>\n      <td>3.0</td>\n      <td>No</td>\n      <td>9.0</td>\n      <td>7.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>18520</th>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>6.0</td>\n      <td>7.0</td>\n      <td>No</td>\n      <td>6.0</td>\n      <td>5.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>18521</th>\n      <td>7.0</td>\n      <td>Yes</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>Yes</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>18522</th>\n      <td>NaN</td>\n      <td>Yes</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>Yes</td>\n      <td>5.0</td>\n      <td>2.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>18523</th>\n      <td>1.0</td>\n      <td>No</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>No</td>\n      <td>4.0</td>\n      <td>7.0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>18524 rows Ã— 8 columns</p>\n</div>"},"metadata":{}}],"execution_count":49},{"cell_type":"code","source":"train_df.isna().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T05:28:49.053668Z","iopub.execute_input":"2025-07-27T05:28:49.054011Z","iopub.status.idle":"2025-07-27T05:28:49.081429Z","shell.execute_reply.started":"2025-07-27T05:28:49.053978Z","shell.execute_reply":"2025-07-27T05:28:49.080437Z"}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"Time_spent_Alone             1190\nStage_fear                   1893\nSocial_event_attendance      1180\nGoing_outside                1466\nDrained_after_socializing    1149\nFriends_circle_size          1054\nPost_frequency               1264\nPersonality                     0\ndtype: int64"},"metadata":{}}],"execution_count":7},{"cell_type":"code","source":"print(train_df.info())\nprint(train_df.describe())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T05:28:49.082594Z","iopub.execute_input":"2025-07-27T05:28:49.082926Z","iopub.status.idle":"2025-07-27T05:28:49.133408Z","shell.execute_reply.started":"2025-07-27T05:28:49.082896Z","shell.execute_reply":"2025-07-27T05:28:49.132383Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 18524 entries, 0 to 18523\nData columns (total 8 columns):\n #   Column                     Non-Null Count  Dtype  \n---  ------                     --------------  -----  \n 0   Time_spent_Alone           17334 non-null  float64\n 1   Stage_fear                 16631 non-null  object \n 2   Social_event_attendance    17344 non-null  float64\n 3   Going_outside              17058 non-null  float64\n 4   Drained_after_socializing  17375 non-null  object \n 5   Friends_circle_size        17470 non-null  float64\n 6   Post_frequency             17260 non-null  float64\n 7   Personality                18524 non-null  int64  \ndtypes: float64(5), int64(1), object(2)\nmemory usage: 1.1+ MB\nNone\n       Time_spent_Alone  Social_event_attendance  Going_outside  \\\ncount      17334.000000             17344.000000   17058.000000   \nmean           3.137764                 5.265106       4.044319   \nstd            3.003786                 2.753359       2.062580   \nmin            0.000000                 0.000000       0.000000   \n25%            1.000000                 3.000000       3.000000   \n50%            2.000000                 5.000000       4.000000   \n75%            4.000000                 8.000000       6.000000   \nmax           11.000000                10.000000       7.000000   \n\n       Friends_circle_size  Post_frequency   Personality  \ncount         17470.000000    17260.000000  18524.000000  \nmean              7.996737        4.982097      0.739527  \nstd               4.223484        2.879139      0.438905  \nmin               0.000000        0.000000      0.000000  \n25%               5.000000        3.000000      0.000000  \n50%               8.000000        5.000000      1.000000  \n75%              12.000000        7.000000      1.000000  \nmax              15.000000       10.000000      1.000000  \n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"sns.heatmap(train_df.corr(numeric_only=True),annot=True,cmap='coolwarm')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T05:28:49.134422Z","iopub.execute_input":"2025-07-27T05:28:49.134753Z","iopub.status.idle":"2025-07-27T05:28:49.80242Z","shell.execute_reply.started":"2025-07-27T05:28:49.134724Z","shell.execute_reply":"2025-07-27T05:28:49.800233Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"from pandas.plotting import scatter_matrix\n\nscatter_matrix(train_df,figsize=(20, 8))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T05:28:49.803638Z","iopub.execute_input":"2025-07-27T05:28:49.803953Z","iopub.status.idle":"2025-07-27T05:28:55.923162Z","shell.execute_reply.started":"2025-07-27T05:28:49.803926Z","shell.execute_reply":"2025-07-27T05:28:55.922015Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"array([[<Axes: xlabel='Time_spent_Alone', ylabel='Time_spent_Alone'>,\n        <Axes: xlabel='Social_event_attendance', ylabel='Time_spent_Alone'>,\n        <Axes: xlabel='Going_outside', ylabel='Time_spent_Alone'>,\n        <Axes: xlabel='Friends_circle_size', ylabel='Time_spent_Alone'>,\n        <Axes: xlabel='Post_frequency', ylabel='Time_spent_Alone'>,\n        <Axes: xlabel='Personality', ylabel='Time_spent_Alone'>],\n       [<Axes: xlabel='Time_spent_Alone', ylabel='Social_event_attendance'>,\n        <Axes: xlabel='Social_event_attendance', ylabel='Social_event_attendance'>,\n        <Axes: xlabel='Going_outside', ylabel='Social_event_attendance'>,\n        <Axes: xlabel='Friends_circle_size', ylabel='Social_event_attendance'>,\n        <Axes: xlabel='Post_frequency', ylabel='Social_event_attendance'>,\n        <Axes: xlabel='Personality', ylabel='Social_event_attendance'>],\n       [<Axes: xlabel='Time_spent_Alone', ylabel='Going_outside'>,\n        <Axes: xlabel='Social_event_attendance', ylabel='Going_outside'>,\n        <Axes: xlabel='Going_outside', ylabel='Going_outside'>,\n        <Axes: xlabel='Friends_circle_size', ylabel='Going_outside'>,\n        <Axes: xlabel='Post_frequency', ylabel='Going_outside'>,\n        <Axes: xlabel='Personality', ylabel='Going_outside'>],\n       [<Axes: xlabel='Time_spent_Alone', ylabel='Friends_circle_size'>,\n        <Axes: xlabel='Social_event_attendance', ylabel='Friends_circle_size'>,\n        <Axes: xlabel='Going_outside', ylabel='Friends_circle_size'>,\n        <Axes: xlabel='Friends_circle_size', ylabel='Friends_circle_size'>,\n        <Axes: xlabel='Post_frequency', ylabel='Friends_circle_size'>,\n        <Axes: xlabel='Personality', ylabel='Friends_circle_size'>],\n       [<Axes: xlabel='Time_spent_Alone', ylabel='Post_frequency'>,\n        <Axes: xlabel='Social_event_attendance', ylabel='Post_frequency'>,\n        <Axes: xlabel='Going_outside', ylabel='Post_frequency'>,\n        <Axes: xlabel='Friends_circle_size', ylabel='Post_frequency'>,\n        <Axes: xlabel='Post_frequency', ylabel='Post_frequency'>,\n        <Axes: xlabel='Personality', ylabel='Post_frequency'>],\n       [<Axes: xlabel='Time_spent_Alone', ylabel='Personality'>,\n        <Axes: xlabel='Social_event_attendance', ylabel='Personality'>,\n        <Axes: xlabel='Going_outside', ylabel='Personality'>,\n        <Axes: xlabel='Friends_circle_size', ylabel='Personality'>,\n        <Axes: xlabel='Post_frequency', ylabel='Personality'>,\n        <Axes: xlabel='Personality', ylabel='Personality'>]], dtype=object)"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 2000x800 with 36 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"from sklearn.base import BaseEstimator, TransformerMixin\n\n#dataframe X\nclass CascadingImputer(BaseEstimator,TransformerMixin):\n\n    def __init__(self,bin_columns=None,impute_steps=None):\n        '''\n        bin_columns : list , columns to create bins\n        impute_steps: list of tuples , [(target_col_to_fill_nan_values,[grp_col1,grp_col2,...])]\n        '''\n        self.bin_columns= bin_columns or []\n        self.impute_steps = impute_steps or []\n        \n    def fit(self,X,y=None):\n        return self\n\n    def transform(self,X):\n        df=X.copy()\n        for col in self.bin_columns:\n            \n            if col in df.columns:\n                df[f'{col}_bin']=pd.qcut(df[col],4,labels=['Q1','Q2','Q3','Q4'])\n\n        for target_col,grp_cols in self.impute_steps:\n            for grp_col in grp_cols:\n                grp_col=grp_col+'_bin'\n                df[target_col]=df[target_col].fillna(df.groupby(grp_col)[target_col].transform('median'))\n                \n        for col in self.bin_columns:\n            df.drop(columns=[f'{col}_bin'],inplace=True)\n            \n        return df\n\ncasading_imputer = CascadingImputer(\n    bin_columns=['Social_event_attendance', 'Going_outside',\n                 'Friends_circle_size', 'Post_frequency'],\n    impute_steps=[\n        ('Time_spent_Alone',       ['Social_event_attendance', 'Going_outside']),\n        ('Social_event_attendance',['Going_outside', 'Friends_circle_size', 'Post_frequency']),\n        ('Going_outside',          ['Social_event_attendance', 'Friends_circle_size', 'Post_frequency']),\n        ('Friends_circle_size',    ['Social_event_attendance', 'Going_outside', 'Post_frequency']),\n        ('Post_frequency',         ['Going_outside', 'Social_event_attendance','Friends_circle_size'])\n    ]\n)\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T05:28:55.924391Z","iopub.execute_input":"2025-07-27T05:28:55.924713Z","iopub.status.idle":"2025-07-27T05:28:55.977191Z","shell.execute_reply.started":"2025-07-27T05:28:55.924687Z","shell.execute_reply":"2025-07-27T05:28:55.976111Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"from sklearn.preprocessing import FunctionTransformer\nfrom sklearn.preprocessing import OneHotEncoder\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\n\nfrom sklearn.preprocessing import StandardScaler\n\ndef fill_stage_drained_with_unKnow(X):\n    df = X.copy()\n    \n    if 'Stage_fear' in df.columns:\n        df['Stage_fear'] = df['Stage_fear'].fillna('UnKnow')\n    \n    if 'Drained_after_socializing' in df.columns:\n        df['Drained_after_socializing'] = df['Drained_after_socializing'].fillna('UnKnow')\n    \n    return df\n\n\ncat_pipe = Pipeline([\n    ('fill_unknown', FunctionTransformer(fill_stage_drained_with_unKnow)),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\nnum_pipe= Pipeline(\n    [('fill_nan',casading_imputer),\n    ('ss',StandardScaler())]\n)\n\n\n\n\npreprocessing=ColumnTransformer(\n    [('nan_imputer_num_and_others',num_pipe,['Time_spent_Alone','Social_event_attendance','Going_outside','Friends_circle_size','Post_frequency']),\n     ('nan_imputer_cat_and_others',cat_pipe,['Stage_fear','Drained_after_socializing'])\n    ], remainder='passthrough'\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T05:28:55.9783Z","iopub.execute_input":"2025-07-27T05:28:55.978661Z","iopub.status.idle":"2025-07-27T05:28:56.053382Z","shell.execute_reply.started":"2025-07-27T05:28:55.978631Z","shell.execute_reply":"2025-07-27T05:28:56.05245Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\n\nX=train_df.drop(columns=['Personality'])\ny=train_df['Personality']\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42,stratify=y)\n\ndef models_performance_cv(preprocessing_pipeline,model,X,y,cv=5):\n    model_pipeline=Pipeline(\n        [('pp',preprocessing_pipeline),\n        ('model',model)]\n    )\n\n    cvs=cross_val_score(model_pipeline,X,y,scoring='roc_auc',cv=cv,verbose=0)\n    print(f'{model} score : {cvs.mean()}')\n    return \n    \n    \n\n\nlg=models_performance_cv(preprocessing,LogisticRegression(),X_train,y_train)\nsgd=models_performance_cv(preprocessing,SGDClassifier(),X_train,y_train)\nsvc=models_performance_cv(preprocessing,SVC(),X_train,y_train)\nrf= models_performance_cv(preprocessing,RandomForestClassifier(),X_train,y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T05:28:56.05455Z","iopub.execute_input":"2025-07-27T05:28:56.054833Z","iopub.status.idle":"2025-07-27T05:29:08.789846Z","shell.execute_reply.started":"2025-07-27T05:28:56.05481Z","shell.execute_reply":"2025-07-27T05:29:08.788666Z"}},"outputs":[{"name":"stdout","text":"LogisticRegression() score : 0.962234519593799\nSGDClassifier() score : 0.9598389775345846\nSVC() score : 0.9661554753853256\nRandomForestClassifier() score : 0.9685353599763303\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"preprocessing","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T05:29:08.790967Z","iopub.execute_input":"2025-07-27T05:29:08.791364Z","iopub.status.idle":"2025-07-27T05:29:08.823159Z","shell.execute_reply.started":"2025-07-27T05:29:08.791342Z","shell.execute_reply":"2025-07-27T05:29:08.822038Z"}},"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"ColumnTransformer(remainder='passthrough',\n                  transformers=[('nan_imputer_num_and_others',\n                                 Pipeline(steps=[('fill_nan',\n                                                  CascadingImputer(bin_columns=['Social_event_attendance',\n                                                                                'Going_outside',\n                                                                                'Friends_circle_size',\n                                                                                'Post_frequency'],\n                                                                   impute_steps=[('Time_spent_Alone',\n                                                                                  ['Social_event_attendance',\n                                                                                   'Going_outside']),\n                                                                                 ('Social_event_attendance',\n                                                                                  ['Going_outside',\n                                                                                   '...\n                                                 ('ss', StandardScaler())]),\n                                 ['Time_spent_Alone', 'Social_event_attendance',\n                                  'Going_outside', 'Friends_circle_size',\n                                  'Post_frequency']),\n                                ('nan_imputer_cat_and_others',\n                                 Pipeline(steps=[('fill_unknown',\n                                                  FunctionTransformer(func=<function fill_stage_drained_with_unKnow at 0x7c18f6c239c0>)),\n                                                 ('onehot',\n                                                  OneHotEncoder(handle_unknown='ignore'))]),\n                                 ['Stage_fear', 'Drained_after_socializing'])])","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                  transformers=[(&#x27;nan_imputer_num_and_others&#x27;,\n                                 Pipeline(steps=[(&#x27;fill_nan&#x27;,\n                                                  CascadingImputer(bin_columns=[&#x27;Social_event_attendance&#x27;,\n                                                                                &#x27;Going_outside&#x27;,\n                                                                                &#x27;Friends_circle_size&#x27;,\n                                                                                &#x27;Post_frequency&#x27;],\n                                                                   impute_steps=[(&#x27;Time_spent_Alone&#x27;,\n                                                                                  [&#x27;Social_event_attendance&#x27;,\n                                                                                   &#x27;Going_outside&#x27;]),\n                                                                                 (&#x27;Social_event_attendance&#x27;,\n                                                                                  [&#x27;Going_outside&#x27;,\n                                                                                   &#x27;...\n                                                 (&#x27;ss&#x27;, StandardScaler())]),\n                                 [&#x27;Time_spent_Alone&#x27;, &#x27;Social_event_attendance&#x27;,\n                                  &#x27;Going_outside&#x27;, &#x27;Friends_circle_size&#x27;,\n                                  &#x27;Post_frequency&#x27;]),\n                                (&#x27;nan_imputer_cat_and_others&#x27;,\n                                 Pipeline(steps=[(&#x27;fill_unknown&#x27;,\n                                                  FunctionTransformer(func=&lt;function fill_stage_drained_with_unKnow at 0x7c18f6c239c0&gt;)),\n                                                 (&#x27;onehot&#x27;,\n                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n                                 [&#x27;Stage_fear&#x27;, &#x27;Drained_after_socializing&#x27;])])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                  transformers=[(&#x27;nan_imputer_num_and_others&#x27;,\n                                 Pipeline(steps=[(&#x27;fill_nan&#x27;,\n                                                  CascadingImputer(bin_columns=[&#x27;Social_event_attendance&#x27;,\n                                                                                &#x27;Going_outside&#x27;,\n                                                                                &#x27;Friends_circle_size&#x27;,\n                                                                                &#x27;Post_frequency&#x27;],\n                                                                   impute_steps=[(&#x27;Time_spent_Alone&#x27;,\n                                                                                  [&#x27;Social_event_attendance&#x27;,\n                                                                                   &#x27;Going_outside&#x27;]),\n                                                                                 (&#x27;Social_event_attendance&#x27;,\n                                                                                  [&#x27;Going_outside&#x27;,\n                                                                                   &#x27;...\n                                                 (&#x27;ss&#x27;, StandardScaler())]),\n                                 [&#x27;Time_spent_Alone&#x27;, &#x27;Social_event_attendance&#x27;,\n                                  &#x27;Going_outside&#x27;, &#x27;Friends_circle_size&#x27;,\n                                  &#x27;Post_frequency&#x27;]),\n                                (&#x27;nan_imputer_cat_and_others&#x27;,\n                                 Pipeline(steps=[(&#x27;fill_unknown&#x27;,\n                                                  FunctionTransformer(func=&lt;function fill_stage_drained_with_unKnow at 0x7c18f6c239c0&gt;)),\n                                                 (&#x27;onehot&#x27;,\n                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n                                 [&#x27;Stage_fear&#x27;, &#x27;Drained_after_socializing&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">nan_imputer_num_and_others</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Time_spent_Alone&#x27;, &#x27;Social_event_attendance&#x27;, &#x27;Going_outside&#x27;, &#x27;Friends_circle_size&#x27;, &#x27;Post_frequency&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">CascadingImputer</label><div class=\"sk-toggleable__content\"><pre>CascadingImputer(bin_columns=[&#x27;Social_event_attendance&#x27;, &#x27;Going_outside&#x27;,\n                              &#x27;Friends_circle_size&#x27;, &#x27;Post_frequency&#x27;],\n                 impute_steps=[(&#x27;Time_spent_Alone&#x27;,\n                                [&#x27;Social_event_attendance&#x27;, &#x27;Going_outside&#x27;]),\n                               (&#x27;Social_event_attendance&#x27;,\n                                [&#x27;Going_outside&#x27;, &#x27;Friends_circle_size&#x27;,\n                                 &#x27;Post_frequency&#x27;]),\n                               (&#x27;Going_outside&#x27;,\n                                [&#x27;Social_event_attendance&#x27;,\n                                 &#x27;Friends_circle_size&#x27;, &#x27;Post_frequency&#x27;]),\n                               (&#x27;Friends_circle_size&#x27;,\n                                [&#x27;Social_event_attendance&#x27;, &#x27;Going_outside&#x27;,\n                                 &#x27;Post_frequency&#x27;]),\n                               (&#x27;Post_frequency&#x27;,\n                                [&#x27;Going_outside&#x27;, &#x27;Social_event_attendance&#x27;,\n                                 &#x27;Friends_circle_size&#x27;])])</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">nan_imputer_cat_and_others</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Stage_fear&#x27;, &#x27;Drained_after_socializing&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">FunctionTransformer</label><div class=\"sk-toggleable__content\"><pre>FunctionTransformer(func=&lt;function fill_stage_drained_with_unKnow at 0x7c18f6c239c0&gt;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">remainder</label><div class=\"sk-toggleable__content\"><pre></pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">passthrough</label><div class=\"sk-toggleable__content\"><pre>passthrough</pre></div></div></div></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":14},{"cell_type":"code","source":"from sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import accuracy_score\n\nlg_pipeline=Pipeline(\n    [('pp',preprocessing),\n    ('logistic_regression',LogisticRegression())]\n)\n\nlg_pipeline.fit(X_train,y_train)\n\npred=lg_pipeline.predict(X_test)\n\nprint(f'roc auc score : {roc_auc_score(y_test,pred)}')\nprint(f'accuracy score : {accuracy_score(y_test,pred)}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T05:29:08.826187Z","iopub.execute_input":"2025-07-27T05:29:08.826738Z","iopub.status.idle":"2025-07-27T05:29:09.034942Z","shell.execute_reply.started":"2025-07-27T05:29:08.826711Z","shell.execute_reply":"2025-07-27T05:29:09.03424Z"}},"outputs":[{"name":"stdout","text":"roc auc score : 0.9547422608508145\naccuracy score : 0.9664649108457386\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"from sklearn.pipeline import Pipeline\nfrom sklearn.metrics import roc_auc_score, accuracy_score\n\ndef evaluate_model(X_train, y_train, X_test, y_test, preprocessing, model):\n    \"\"\"\n    Fit the model pipeline and print ROC AUC and accuracy scores.\n\n    Parameters:\n    - X_train: training features (DataFrame or array-like)\n    - y_train: training labels (array-like)\n    - X_test: test features (DataFrame or array-like)\n    - y_test: test labels (array-like)\n    - preprocessing: sklearn Transformer or ColumnTransformer pipeline\n    - model: sklearn estimator object (e.g., LogisticRegression(), RandomForestClassifier())\n\n    Returns:\n    - pipeline: the fitted pipeline (Pipeline object)\n    - scores: dictionary with keys 'roc_auc' and 'accuracy'\n    \"\"\"\n    # Create a pipeline combining preprocessing and model\n    pipeline = Pipeline([\n        ('pp', preprocessing),\n        ('model', model)\n    ])\n\n    # Fit pipeline\n    pipeline.fit(X_train, y_train)\n\n    # Obtain predicted probabilities for roc_auc_score (binary classification)\n    try:\n        pred_proba = pipeline.predict_proba(X_test)[:, 1]\n    except AttributeError:\n        # Some models might not have predict_proba\n        pred_proba = None\n\n    # Obtain predicted classes\n    pred = pipeline.predict(X_test)\n\n    # Calculate scores\n    if pred_proba is not None:\n        roc_auc = roc_auc_score(y_test, pred_proba)\n    else:\n        # fallback to using predicted classes (less ideal)\n        roc_auc = roc_auc_score(y_test, pred)\n\n    accuracy = accuracy_score(y_test, pred)\n\n    print(f'ROC AUC score : {roc_auc:.4f}')\n    print(f'Accuracy score : {accuracy:.4f}')\n\n    scores = {'roc_auc': roc_auc, 'accuracy': accuracy}\n    return pipeline, scores\n\npipeline, scores = evaluate_model(X_train, y_train, X_test, y_test, preprocessing, LogisticRegression())\nprint(f'LogisticRegression : {scores}')\nprint('\\n')\n\npipeline, scores = evaluate_model(X_train, y_train, X_test, y_test, preprocessing, SVC())\nprint(f'SVC : {scores}')\nprint('\\n')\n\npipeline, scores = evaluate_model(X_train, y_train, X_test, y_test, preprocessing, SGDClassifier())\nprint(f'SGDClassifier : {scores}')\nprint('\\n')\n\npipeline, scores = evaluate_model(X_train, y_train, X_test, y_test, preprocessing, RandomForestClassifier())\nprint(f'random forest : {scores}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T05:29:09.035569Z","iopub.execute_input":"2025-07-27T05:29:09.035785Z","iopub.status.idle":"2025-07-27T05:29:12.647756Z","shell.execute_reply.started":"2025-07-27T05:29:09.035767Z","shell.execute_reply":"2025-07-27T05:29:12.646772Z"}},"outputs":[{"name":"stdout","text":"ROC AUC score : 0.9513\nAccuracy score : 0.9665\nLogisticRegression : {'roc_auc': 0.9512790812056301, 'accuracy': 0.9664649108457386}\n\n\nROC AUC score : 0.9546\nAccuracy score : 0.9666\nSVC : {'roc_auc': 0.9546493805012678, 'accuracy': 0.9666284966464911}\n\n\nROC AUC score : 0.9538\nAccuracy score : 0.9660\nSGDClassifier : {'roc_auc': 0.953800049795538, 'accuracy': 0.9659741534434811}\n\n\nROC AUC score : 0.9582\nAccuracy score : 0.9611\nrandom forest : {'roc_auc': 0.9582477472520755, 'accuracy': 0.9610665794209062}\n","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"from sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import loguniform,randint\n\ndef hyperparameter_search(model, param_grid, X_train, y_train, X_test, y_test,preprocessing=None, model_name='model', n_iter=20, cv=3,scoring='accuracy', verbose=1):\n    \n    \"\"\"\n    returns best estimator from random search and results [dict]\n    \"\"\"\n    \n    #create pipeline\n    if preprocessing is not None:\n        pipeline = Pipeline([\n            ('preprocessing', preprocessing),\n            (model_name, model)\n        ])\n        #add correct prefix to param_grid keys if not already present\n        formatted_param_grid = {}\n        expected_prefix = f'{model_name}__'\n        \n        for key, value in param_grid.items():\n            if not key.startswith(expected_prefix):\n                formatted_param_grid[f'{expected_prefix}{key}'] = value\n            else:\n                formatted_param_grid[key] = value\n    else:\n        pipeline = model\n        formatted_param_grid = param_grid\n\n\n    rs = RandomizedSearchCV(pipeline, \n        formatted_param_grid, \n        n_iter=n_iter, \n        cv=cv, \n        scoring=scoring,\n        verbose=verbose)\n    \n    rs.fit(X_train, y_train)\n    \n   \n    train_score = rs.score(X_train, y_train)\n    test_score = rs.score(X_test, y_test)\n    y_pred = rs.predict(X_test)\n    \n   \n    results = {\n        'best_estimator': rs.best_estimator_,\n        'best_params': rs.best_params_,\n        'best_cv_score': rs.best_score_,\n        'train_score': train_score,\n        'test_score': test_score,\n        'y_pred': y_pred,\n        'randomized_search': rs\n    }\n    print(f'Model: {model_name}')\n    print(f\"Best CV Score: {rs.best_score_:.4f}\")\n    print(f\"Test Score: {test_score:.4f}\")\n    print(f\"Best Parameters: {rs.best_params_}\")\n    print('\\n')\n    #rs.best_estimator returns the entire pipeline including preprocessing step so lets just return the model only\n    return rs.best_params_,results","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T05:29:12.648776Z","iopub.execute_input":"2025-07-27T05:29:12.649044Z","iopub.status.idle":"2025-07-27T05:29:12.660585Z","shell.execute_reply.started":"2025-07-27T05:29:12.649023Z","shell.execute_reply":"2025-07-27T05:29:12.659409Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"lg_pipeline=Pipeline(\n    [('pp',preprocessing),\n    ('logistic_regression',LogisticRegression())]\n)\n\nlg_param_grid = {\n    'logistic_regression__C': loguniform(0.01, 100),           # Regularization strength\n    'logistic_regression__penalty': ['l1', 'l2'],              # Regularization type\n    'logistic_regression__solver': ['liblinear'],              # Works with both l1 and l2\n    'logistic_regression__max_iter': [1000]                    # Fixed iterations\n}\n\n\n\nsvc_pipeline=Pipeline(\n    [('pp',preprocessing),\n    ('svc',SVC())]\n)\n\nsvc_param_grid = {\n    'svc__C': loguniform(0.1, 100),                    # Regularization parameter\n    'svc__kernel': ['linear', 'rbf', 'poly'],          # Kernel type\n    'svc__gamma': loguniform(1e-4, 1e-1),              # Kernel coefficient for rbf/poly\n    'svc__degree': [2, 3, 4],                          # Degree for polynomial kernel\n    'svc__probability': [True]                         # Enable probability estimates\n}\n\nrf_pipeline=Pipeline(\n    [('pp',preprocessing),\n     ('random_forest',RandomForestClassifier())]\n)\n\nrf_param_grid = {\n    'random_forest__n_estimators': randint(50, 300),           # Number of trees\n    'random_forest__max_depth': [3, 5, 7, 10, None],          # Tree depth\n    'random_forest__min_samples_split': randint(2, 10),       # Min samples to split\n    'random_forest__min_samples_leaf': randint(1, 5),         # Min samples in leaf\n    'random_forest__max_features': ['sqrt', 'log2', None],    # Features per split\n    'random_forest__bootstrap': [True, False]                 # Bootstrap sampling\n}\n\n\n\nlg_final_param,res_lg=hyperparameter_search(lg_pipeline,lg_param_grid,X_train,y_train,X_test,y_test,model_name='logistic_regression')\nsvc_final_param,res_svc=hyperparameter_search(svc_pipeline,svc_param_grid,X_train,y_train,X_test,y_test,model_name='svc')\nrf_final_param,res_rf=hyperparameter_search(rf_pipeline,rf_param_grid,X_train,y_train,X_test,y_test,model_name='random_forest')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T05:29:12.662068Z","iopub.execute_input":"2025-07-27T05:29:12.66242Z","iopub.status.idle":"2025-07-27T05:36:31.155919Z","shell.execute_reply.started":"2025-07-27T05:29:12.662384Z","shell.execute_reply":"2025-07-27T05:36:31.154978Z"}},"outputs":[{"name":"stdout","text":"Fitting 3 folds for each of 20 candidates, totalling 60 fits\nModel: logistic_regression\nBest CV Score: 0.9703\nTest Score: 0.9666\nBest Parameters: {'logistic_regression__C': 0.06163397863898331, 'logistic_regression__max_iter': 1000, 'logistic_regression__penalty': 'l2', 'logistic_regression__solver': 'liblinear'}\n\n\nFitting 3 folds for each of 20 candidates, totalling 60 fits\nModel: svc\nBest CV Score: 0.9703\nTest Score: 0.9663\nBest Parameters: {'svc__C': 16.242649850626332, 'svc__degree': 2, 'svc__gamma': 0.0006186205226242456, 'svc__kernel': 'rbf', 'svc__probability': True}\n\n\nFitting 3 folds for each of 20 candidates, totalling 60 fits\nModel: random_forest\nBest CV Score: 0.9707\nTest Score: 0.9665\nBest Parameters: {'random_forest__bootstrap': False, 'random_forest__max_depth': 7, 'random_forest__max_features': 'log2', 'random_forest__min_samples_leaf': 3, 'random_forest__min_samples_split': 2, 'random_forest__n_estimators': 201}\n\n\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"def strip_prefix(params, prefix):\n    \"\"\"Remove pipeline prefix from parameter names\"\"\"\n    stripped_params = {}\n    prefix_with_separator = f\"{prefix}__\"\n    \n    for key, value in params.items():\n        if key.startswith(prefix_with_separator):\n            # Remove the prefix and separator\n            new_key = key[len(prefix_with_separator):]\n            stripped_params[new_key] = value\n        else:\n          \n            stripped_params[key] = value\n    \n    return stripped_params\n\n# Strip prefixes from your best parameters\nrf_clean_params = strip_prefix(res_rf['best_params'], 'random_forest')\nsvc_clean_params = strip_prefix(res_svc['best_params'], 'svc')  \nlg_clean_params = strip_prefix(res_lg['best_params'], 'logistic_regression')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T05:36:31.15695Z","iopub.execute_input":"2025-07-27T05:36:31.15749Z","iopub.status.idle":"2025-07-27T05:36:31.164479Z","shell.execute_reply.started":"2025-07-27T05:36:31.157456Z","shell.execute_reply":"2025-07-27T05:36:31.163516Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"from sklearn.ensemble import StackingClassifier\n\n#fresh models with best parameters\n\nfinal_model=StackingClassifier([('random_forest',RandomForestClassifier(**rf_clean_params)),('svc',SVC(**svc_clean_params))],final_estimator=LogisticRegression(**lg_clean_params))\nfinal_model_pipeline=Pipeline([('pp',preprocessing),('final_model',final_model)])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T05:36:31.16562Z","iopub.execute_input":"2025-07-27T05:36:31.165969Z","iopub.status.idle":"2025-07-27T05:36:31.190478Z","shell.execute_reply.started":"2025-07-27T05:36:31.165933Z","shell.execute_reply":"2025-07-27T05:36:31.18951Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"final_model_pipeline","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T05:36:31.191336Z","iopub.execute_input":"2025-07-27T05:36:31.191631Z","iopub.status.idle":"2025-07-27T05:36:31.31152Z","shell.execute_reply.started":"2025-07-27T05:36:31.19161Z","shell.execute_reply":"2025-07-27T05:36:31.310455Z"}},"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('pp',\n                 ColumnTransformer(remainder='passthrough',\n                                   transformers=[('nan_imputer_num_and_others',\n                                                  Pipeline(steps=[('fill_nan',\n                                                                   CascadingImputer(bin_columns=['Social_event_attendance',\n                                                                                                 'Going_outside',\n                                                                                                 'Friends_circle_size',\n                                                                                                 'Post_frequency'],\n                                                                                    impute_steps=[('Time_spent_Alone',\n                                                                                                   ['Social_event_attendance',\n                                                                                                    'Going_outside']),\n                                                                                                  ('Social_event_attendan...\n                ('final_model',\n                 StackingClassifier(estimators=[('random_forest',\n                                                 RandomForestClassifier(bootstrap=False,\n                                                                        max_depth=7,\n                                                                        max_features='log2',\n                                                                        min_samples_leaf=3,\n                                                                        n_estimators=201)),\n                                                ('svc',\n                                                 SVC(C=16.242649850626332,\n                                                     degree=2,\n                                                     gamma=0.0006186205226242456,\n                                                     probability=True))],\n                                    final_estimator=LogisticRegression(C=0.06163397863898331,\n                                                                       max_iter=1000,\n                                                                       solver='liblinear')))])","text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;pp&#x27;,\n                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                                   transformers=[(&#x27;nan_imputer_num_and_others&#x27;,\n                                                  Pipeline(steps=[(&#x27;fill_nan&#x27;,\n                                                                   CascadingImputer(bin_columns=[&#x27;Social_event_attendance&#x27;,\n                                                                                                 &#x27;Going_outside&#x27;,\n                                                                                                 &#x27;Friends_circle_size&#x27;,\n                                                                                                 &#x27;Post_frequency&#x27;],\n                                                                                    impute_steps=[(&#x27;Time_spent_Alone&#x27;,\n                                                                                                   [&#x27;Social_event_attendance&#x27;,\n                                                                                                    &#x27;Going_outside&#x27;]),\n                                                                                                  (&#x27;Social_event_attendan...\n                (&#x27;final_model&#x27;,\n                 StackingClassifier(estimators=[(&#x27;random_forest&#x27;,\n                                                 RandomForestClassifier(bootstrap=False,\n                                                                        max_depth=7,\n                                                                        max_features=&#x27;log2&#x27;,\n                                                                        min_samples_leaf=3,\n                                                                        n_estimators=201)),\n                                                (&#x27;svc&#x27;,\n                                                 SVC(C=16.242649850626332,\n                                                     degree=2,\n                                                     gamma=0.0006186205226242456,\n                                                     probability=True))],\n                                    final_estimator=LogisticRegression(C=0.06163397863898331,\n                                                                       max_iter=1000,\n                                                                       solver=&#x27;liblinear&#x27;)))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;pp&#x27;,\n                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                                   transformers=[(&#x27;nan_imputer_num_and_others&#x27;,\n                                                  Pipeline(steps=[(&#x27;fill_nan&#x27;,\n                                                                   CascadingImputer(bin_columns=[&#x27;Social_event_attendance&#x27;,\n                                                                                                 &#x27;Going_outside&#x27;,\n                                                                                                 &#x27;Friends_circle_size&#x27;,\n                                                                                                 &#x27;Post_frequency&#x27;],\n                                                                                    impute_steps=[(&#x27;Time_spent_Alone&#x27;,\n                                                                                                   [&#x27;Social_event_attendance&#x27;,\n                                                                                                    &#x27;Going_outside&#x27;]),\n                                                                                                  (&#x27;Social_event_attendan...\n                (&#x27;final_model&#x27;,\n                 StackingClassifier(estimators=[(&#x27;random_forest&#x27;,\n                                                 RandomForestClassifier(bootstrap=False,\n                                                                        max_depth=7,\n                                                                        max_features=&#x27;log2&#x27;,\n                                                                        min_samples_leaf=3,\n                                                                        n_estimators=201)),\n                                                (&#x27;svc&#x27;,\n                                                 SVC(C=16.242649850626332,\n                                                     degree=2,\n                                                     gamma=0.0006186205226242456,\n                                                     probability=True))],\n                                    final_estimator=LogisticRegression(C=0.06163397863898331,\n                                                                       max_iter=1000,\n                                                                       solver=&#x27;liblinear&#x27;)))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">pp: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                  transformers=[(&#x27;nan_imputer_num_and_others&#x27;,\n                                 Pipeline(steps=[(&#x27;fill_nan&#x27;,\n                                                  CascadingImputer(bin_columns=[&#x27;Social_event_attendance&#x27;,\n                                                                                &#x27;Going_outside&#x27;,\n                                                                                &#x27;Friends_circle_size&#x27;,\n                                                                                &#x27;Post_frequency&#x27;],\n                                                                   impute_steps=[(&#x27;Time_spent_Alone&#x27;,\n                                                                                  [&#x27;Social_event_attendance&#x27;,\n                                                                                   &#x27;Going_outside&#x27;]),\n                                                                                 (&#x27;Social_event_attendance&#x27;,\n                                                                                  [&#x27;Going_outside&#x27;,\n                                                                                   &#x27;...\n                                                 (&#x27;ss&#x27;, StandardScaler())]),\n                                 [&#x27;Time_spent_Alone&#x27;, &#x27;Social_event_attendance&#x27;,\n                                  &#x27;Going_outside&#x27;, &#x27;Friends_circle_size&#x27;,\n                                  &#x27;Post_frequency&#x27;]),\n                                (&#x27;nan_imputer_cat_and_others&#x27;,\n                                 Pipeline(steps=[(&#x27;fill_unknown&#x27;,\n                                                  FunctionTransformer(func=&lt;function fill_stage_drained_with_unKnow at 0x7c18f6c239c0&gt;)),\n                                                 (&#x27;onehot&#x27;,\n                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n                                 [&#x27;Stage_fear&#x27;, &#x27;Drained_after_socializing&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">nan_imputer_num_and_others</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Time_spent_Alone&#x27;, &#x27;Social_event_attendance&#x27;, &#x27;Going_outside&#x27;, &#x27;Friends_circle_size&#x27;, &#x27;Post_frequency&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">CascadingImputer</label><div class=\"sk-toggleable__content\"><pre>CascadingImputer(bin_columns=[&#x27;Social_event_attendance&#x27;, &#x27;Going_outside&#x27;,\n                              &#x27;Friends_circle_size&#x27;, &#x27;Post_frequency&#x27;],\n                 impute_steps=[(&#x27;Time_spent_Alone&#x27;,\n                                [&#x27;Social_event_attendance&#x27;, &#x27;Going_outside&#x27;]),\n                               (&#x27;Social_event_attendance&#x27;,\n                                [&#x27;Going_outside&#x27;, &#x27;Friends_circle_size&#x27;,\n                                 &#x27;Post_frequency&#x27;]),\n                               (&#x27;Going_outside&#x27;,\n                                [&#x27;Social_event_attendance&#x27;,\n                                 &#x27;Friends_circle_size&#x27;, &#x27;Post_frequency&#x27;]),\n                               (&#x27;Friends_circle_size&#x27;,\n                                [&#x27;Social_event_attendance&#x27;, &#x27;Going_outside&#x27;,\n                                 &#x27;Post_frequency&#x27;]),\n                               (&#x27;Post_frequency&#x27;,\n                                [&#x27;Going_outside&#x27;, &#x27;Social_event_attendance&#x27;,\n                                 &#x27;Friends_circle_size&#x27;])])</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" ><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">nan_imputer_cat_and_others</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Stage_fear&#x27;, &#x27;Drained_after_socializing&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" ><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">FunctionTransformer</label><div class=\"sk-toggleable__content\"><pre>FunctionTransformer(func=&lt;function fill_stage_drained_with_unKnow at 0x7c18f6c239c0&gt;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" ><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">remainder</label><div class=\"sk-toggleable__content\"><pre>[]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" ><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">passthrough</label><div class=\"sk-toggleable__content\"><pre>passthrough</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" ><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">final_model: StackingClassifier</label><div class=\"sk-toggleable__content\"><pre>StackingClassifier(estimators=[(&#x27;random_forest&#x27;,\n                                RandomForestClassifier(bootstrap=False,\n                                                       max_depth=7,\n                                                       max_features=&#x27;log2&#x27;,\n                                                       min_samples_leaf=3,\n                                                       n_estimators=201)),\n                               (&#x27;svc&#x27;,\n                                SVC(C=16.242649850626332, degree=2,\n                                    gamma=0.0006186205226242456,\n                                    probability=True))],\n                   final_estimator=LogisticRegression(C=0.06163397863898331,\n                                                      max_iter=1000,\n                                                      solver=&#x27;liblinear&#x27;))</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>random_forest</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-21\" type=\"checkbox\" ><label for=\"sk-estimator-id-21\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(bootstrap=False, max_depth=7, max_features=&#x27;log2&#x27;,\n                       min_samples_leaf=3, n_estimators=201)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>svc</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-22\" type=\"checkbox\" ><label for=\"sk-estimator-id-22\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(C=16.242649850626332, degree=2, gamma=0.0006186205226242456,\n    probability=True)</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>final_estimator</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-23\" type=\"checkbox\" ><label for=\"sk-estimator-id-23\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(C=0.06163397863898331, max_iter=1000, solver=&#x27;liblinear&#x27;)</pre></div></div></div></div></div></div></div></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":21},{"cell_type":"code","source":"final_model_pipeline.fit(X_train,y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T06:49:49.482858Z","iopub.execute_input":"2025-07-27T06:49:49.483288Z","iopub.status.idle":"2025-07-27T06:50:15.318665Z","shell.execute_reply.started":"2025-07-27T06:49:49.483251Z","shell.execute_reply":"2025-07-27T06:50:15.317618Z"}},"outputs":[{"execution_count":55,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('pp',\n                 ColumnTransformer(remainder='passthrough',\n                                   transformers=[('nan_imputer_num_and_others',\n                                                  Pipeline(steps=[('fill_nan',\n                                                                   CascadingImputer(bin_columns=['Social_event_attendance',\n                                                                                                 'Going_outside',\n                                                                                                 'Friends_circle_size',\n                                                                                                 'Post_frequency'],\n                                                                                    impute_steps=[('Time_spent_Alone',\n                                                                                                   ['Social_event_attendance',\n                                                                                                    'Going_outside']),\n                                                                                                  ('Social_event_attendan...\n                ('final_model',\n                 StackingClassifier(estimators=[('random_forest',\n                                                 RandomForestClassifier(bootstrap=False,\n                                                                        max_depth=7,\n                                                                        max_features='log2',\n                                                                        min_samples_leaf=3,\n                                                                        n_estimators=201)),\n                                                ('svc',\n                                                 SVC(C=16.242649850626332,\n                                                     degree=2,\n                                                     gamma=0.0006186205226242456,\n                                                     probability=True))],\n                                    final_estimator=LogisticRegression(C=0.06163397863898331,\n                                                                       max_iter=1000,\n                                                                       solver='liblinear')))])","text/html":"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;pp&#x27;,\n                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                                   transformers=[(&#x27;nan_imputer_num_and_others&#x27;,\n                                                  Pipeline(steps=[(&#x27;fill_nan&#x27;,\n                                                                   CascadingImputer(bin_columns=[&#x27;Social_event_attendance&#x27;,\n                                                                                                 &#x27;Going_outside&#x27;,\n                                                                                                 &#x27;Friends_circle_size&#x27;,\n                                                                                                 &#x27;Post_frequency&#x27;],\n                                                                                    impute_steps=[(&#x27;Time_spent_Alone&#x27;,\n                                                                                                   [&#x27;Social_event_attendance&#x27;,\n                                                                                                    &#x27;Going_outside&#x27;]),\n                                                                                                  (&#x27;Social_event_attendan...\n                (&#x27;final_model&#x27;,\n                 StackingClassifier(estimators=[(&#x27;random_forest&#x27;,\n                                                 RandomForestClassifier(bootstrap=False,\n                                                                        max_depth=7,\n                                                                        max_features=&#x27;log2&#x27;,\n                                                                        min_samples_leaf=3,\n                                                                        n_estimators=201)),\n                                                (&#x27;svc&#x27;,\n                                                 SVC(C=16.242649850626332,\n                                                     degree=2,\n                                                     gamma=0.0006186205226242456,\n                                                     probability=True))],\n                                    final_estimator=LogisticRegression(C=0.06163397863898331,\n                                                                       max_iter=1000,\n                                                                       solver=&#x27;liblinear&#x27;)))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-38\" type=\"checkbox\" ><label for=\"sk-estimator-id-38\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;pp&#x27;,\n                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                                   transformers=[(&#x27;nan_imputer_num_and_others&#x27;,\n                                                  Pipeline(steps=[(&#x27;fill_nan&#x27;,\n                                                                   CascadingImputer(bin_columns=[&#x27;Social_event_attendance&#x27;,\n                                                                                                 &#x27;Going_outside&#x27;,\n                                                                                                 &#x27;Friends_circle_size&#x27;,\n                                                                                                 &#x27;Post_frequency&#x27;],\n                                                                                    impute_steps=[(&#x27;Time_spent_Alone&#x27;,\n                                                                                                   [&#x27;Social_event_attendance&#x27;,\n                                                                                                    &#x27;Going_outside&#x27;]),\n                                                                                                  (&#x27;Social_event_attendan...\n                (&#x27;final_model&#x27;,\n                 StackingClassifier(estimators=[(&#x27;random_forest&#x27;,\n                                                 RandomForestClassifier(bootstrap=False,\n                                                                        max_depth=7,\n                                                                        max_features=&#x27;log2&#x27;,\n                                                                        min_samples_leaf=3,\n                                                                        n_estimators=201)),\n                                                (&#x27;svc&#x27;,\n                                                 SVC(C=16.242649850626332,\n                                                     degree=2,\n                                                     gamma=0.0006186205226242456,\n                                                     probability=True))],\n                                    final_estimator=LogisticRegression(C=0.06163397863898331,\n                                                                       max_iter=1000,\n                                                                       solver=&#x27;liblinear&#x27;)))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-39\" type=\"checkbox\" ><label for=\"sk-estimator-id-39\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">pp: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                  transformers=[(&#x27;nan_imputer_num_and_others&#x27;,\n                                 Pipeline(steps=[(&#x27;fill_nan&#x27;,\n                                                  CascadingImputer(bin_columns=[&#x27;Social_event_attendance&#x27;,\n                                                                                &#x27;Going_outside&#x27;,\n                                                                                &#x27;Friends_circle_size&#x27;,\n                                                                                &#x27;Post_frequency&#x27;],\n                                                                   impute_steps=[(&#x27;Time_spent_Alone&#x27;,\n                                                                                  [&#x27;Social_event_attendance&#x27;,\n                                                                                   &#x27;Going_outside&#x27;]),\n                                                                                 (&#x27;Social_event_attendance&#x27;,\n                                                                                  [&#x27;Going_outside&#x27;,\n                                                                                   &#x27;...\n                                                 (&#x27;ss&#x27;, StandardScaler())]),\n                                 [&#x27;Time_spent_Alone&#x27;, &#x27;Social_event_attendance&#x27;,\n                                  &#x27;Going_outside&#x27;, &#x27;Friends_circle_size&#x27;,\n                                  &#x27;Post_frequency&#x27;]),\n                                (&#x27;nan_imputer_cat_and_others&#x27;,\n                                 Pipeline(steps=[(&#x27;fill_unknown&#x27;,\n                                                  FunctionTransformer(func=&lt;function fill_stage_drained_with_unKnow at 0x7c18f6c239c0&gt;)),\n                                                 (&#x27;onehot&#x27;,\n                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n                                 [&#x27;Stage_fear&#x27;, &#x27;Drained_after_socializing&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-40\" type=\"checkbox\" ><label for=\"sk-estimator-id-40\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">nan_imputer_num_and_others</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Time_spent_Alone&#x27;, &#x27;Social_event_attendance&#x27;, &#x27;Going_outside&#x27;, &#x27;Friends_circle_size&#x27;, &#x27;Post_frequency&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-41\" type=\"checkbox\" ><label for=\"sk-estimator-id-41\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">CascadingImputer</label><div class=\"sk-toggleable__content\"><pre>CascadingImputer(bin_columns=[&#x27;Social_event_attendance&#x27;, &#x27;Going_outside&#x27;,\n                              &#x27;Friends_circle_size&#x27;, &#x27;Post_frequency&#x27;],\n                 impute_steps=[(&#x27;Time_spent_Alone&#x27;,\n                                [&#x27;Social_event_attendance&#x27;, &#x27;Going_outside&#x27;]),\n                               (&#x27;Social_event_attendance&#x27;,\n                                [&#x27;Going_outside&#x27;, &#x27;Friends_circle_size&#x27;,\n                                 &#x27;Post_frequency&#x27;]),\n                               (&#x27;Going_outside&#x27;,\n                                [&#x27;Social_event_attendance&#x27;,\n                                 &#x27;Friends_circle_size&#x27;, &#x27;Post_frequency&#x27;]),\n                               (&#x27;Friends_circle_size&#x27;,\n                                [&#x27;Social_event_attendance&#x27;, &#x27;Going_outside&#x27;,\n                                 &#x27;Post_frequency&#x27;]),\n                               (&#x27;Post_frequency&#x27;,\n                                [&#x27;Going_outside&#x27;, &#x27;Social_event_attendance&#x27;,\n                                 &#x27;Friends_circle_size&#x27;])])</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-42\" type=\"checkbox\" ><label for=\"sk-estimator-id-42\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-43\" type=\"checkbox\" ><label for=\"sk-estimator-id-43\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">nan_imputer_cat_and_others</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Stage_fear&#x27;, &#x27;Drained_after_socializing&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-44\" type=\"checkbox\" ><label for=\"sk-estimator-id-44\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">FunctionTransformer</label><div class=\"sk-toggleable__content\"><pre>FunctionTransformer(func=&lt;function fill_stage_drained_with_unKnow at 0x7c18f6c239c0&gt;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-45\" type=\"checkbox\" ><label for=\"sk-estimator-id-45\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-46\" type=\"checkbox\" ><label for=\"sk-estimator-id-46\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">remainder</label><div class=\"sk-toggleable__content\"><pre>[]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-47\" type=\"checkbox\" ><label for=\"sk-estimator-id-47\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">passthrough</label><div class=\"sk-toggleable__content\"><pre>passthrough</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-48\" type=\"checkbox\" ><label for=\"sk-estimator-id-48\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">final_model: StackingClassifier</label><div class=\"sk-toggleable__content\"><pre>StackingClassifier(estimators=[(&#x27;random_forest&#x27;,\n                                RandomForestClassifier(bootstrap=False,\n                                                       max_depth=7,\n                                                       max_features=&#x27;log2&#x27;,\n                                                       min_samples_leaf=3,\n                                                       n_estimators=201)),\n                               (&#x27;svc&#x27;,\n                                SVC(C=16.242649850626332, degree=2,\n                                    gamma=0.0006186205226242456,\n                                    probability=True))],\n                   final_estimator=LogisticRegression(C=0.06163397863898331,\n                                                      max_iter=1000,\n                                                      solver=&#x27;liblinear&#x27;))</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>random_forest</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-49\" type=\"checkbox\" ><label for=\"sk-estimator-id-49\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(bootstrap=False, max_depth=7, max_features=&#x27;log2&#x27;,\n                       min_samples_leaf=3, n_estimators=201)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>svc</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-50\" type=\"checkbox\" ><label for=\"sk-estimator-id-50\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(C=16.242649850626332, degree=2, gamma=0.0006186205226242456,\n    probability=True)</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>final_estimator</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-51\" type=\"checkbox\" ><label for=\"sk-estimator-id-51\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(C=0.06163397863898331, max_iter=1000, solver=&#x27;liblinear&#x27;)</pre></div></div></div></div></div></div></div></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":55},{"cell_type":"code","source":"pred=final_model_pipeline.predict(test_df)\n# Create submission\nsubmission = pd.DataFrame({\n    'id': test_ID,\n    'Personality': pred\n})\n\nprint(submission.head())\nsubmission['Personality'] = submission['Personality'].map({1: 'Extrovert', 0: 'Introvert'})\nsubmission.to_csv('submission.csv', index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T05:36:56.284719Z","iopub.execute_input":"2025-07-27T05:36:56.284986Z","iopub.status.idle":"2025-07-27T05:36:56.802085Z","shell.execute_reply.started":"2025-07-27T05:36:56.284967Z","shell.execute_reply":"2025-07-27T05:36:56.801142Z"}},"outputs":[{"name":"stdout","text":"      id  Personality\n0  18524            1\n1  18525            0\n2  18526            1\n3  18527            1\n4  18528            0\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"submission","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T05:36:56.803036Z","iopub.execute_input":"2025-07-27T05:36:56.803887Z","iopub.status.idle":"2025-07-27T05:36:56.814018Z","shell.execute_reply.started":"2025-07-27T05:36:56.803852Z","shell.execute_reply":"2025-07-27T05:36:56.813098Z"}},"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"         id Personality\n0     18524   Extrovert\n1     18525   Introvert\n2     18526   Extrovert\n3     18527   Extrovert\n4     18528   Introvert\n...     ...         ...\n6170  24694   Extrovert\n6171  24695   Introvert\n6172  24696   Extrovert\n6173  24697   Extrovert\n6174  24698   Introvert\n\n[6175 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Personality</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>18524</td>\n      <td>Extrovert</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>18525</td>\n      <td>Introvert</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18526</td>\n      <td>Extrovert</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>18527</td>\n      <td>Extrovert</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>18528</td>\n      <td>Introvert</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>6170</th>\n      <td>24694</td>\n      <td>Extrovert</td>\n    </tr>\n    <tr>\n      <th>6171</th>\n      <td>24695</td>\n      <td>Introvert</td>\n    </tr>\n    <tr>\n      <th>6172</th>\n      <td>24696</td>\n      <td>Extrovert</td>\n    </tr>\n    <tr>\n      <th>6173</th>\n      <td>24697</td>\n      <td>Extrovert</td>\n    </tr>\n    <tr>\n      <th>6174</th>\n      <td>24698</td>\n      <td>Introvert</td>\n    </tr>\n  </tbody>\n</table>\n<p>6175 rows Ã— 2 columns</p>\n</div>"},"metadata":{}}],"execution_count":24},{"cell_type":"code","source":"Time_spend_Alone : [0,1,2,3,4,5,6,7,8,9,10,11]\nStage_fear: [Yes,No]\nSocial_event_attendance :  [0,1,2,3,4,5,6,7,8,9,10]\nGoing_outside : [0,1,2,3,4,5,6,7]\nDrained_after_socializing: [Yes,No]\nFriends_circle_size: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nPost_frequency: [0,1,2,3,4,5,6,7,8,9,10]\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T07:17:38.364178Z","iopub.execute_input":"2025-07-27T07:17:38.367574Z","iopub.status.idle":"2025-07-27T07:17:38.40491Z","shell.execute_reply.started":"2025-07-27T07:17:38.36745Z","shell.execute_reply":"2025-07-27T07:17:38.403801Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":56,"output_type":"execute_result","data":{"text/plain":"       Time_spent_Alone Stage_fear  Social_event_attendance  Going_outside  \\\n0                   0.0         No                      6.0            4.0   \n1                   1.0         No                      7.0            3.0   \n2                   6.0        Yes                      1.0            0.0   \n3                   3.0         No                      7.0            3.0   \n4                   1.0         No                      4.0            4.0   \n...                 ...        ...                      ...            ...   \n18519               3.0         No                      7.0            3.0   \n18520               1.0        NaN                      6.0            7.0   \n18521               7.0        Yes                      1.0            1.0   \n18522               NaN        Yes                      1.0            0.0   \n18523               1.0         No                      8.0            6.0   \n\n      Drained_after_socializing  Friends_circle_size  Post_frequency  \\\n0                            No                 15.0             5.0   \n1                            No                 10.0             8.0   \n2                           NaN                  3.0             0.0   \n3                            No                 11.0             5.0   \n4                            No                 13.0             NaN   \n...                         ...                  ...             ...   \n18519                        No                  9.0             7.0   \n18520                        No                  6.0             5.0   \n18521                       Yes                  1.0             NaN   \n18522                       Yes                  5.0             2.0   \n18523                        No                  4.0             7.0   \n\n       Personality  \n0                1  \n1                1  \n2                0  \n3                1  \n4                1  \n...            ...  \n18519            1  \n18520            1  \n18521            0  \n18522            0  \n18523            1  \n\n[18524 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Time_spent_Alone</th>\n      <th>Stage_fear</th>\n      <th>Social_event_attendance</th>\n      <th>Going_outside</th>\n      <th>Drained_after_socializing</th>\n      <th>Friends_circle_size</th>\n      <th>Post_frequency</th>\n      <th>Personality</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.0</td>\n      <td>No</td>\n      <td>6.0</td>\n      <td>4.0</td>\n      <td>No</td>\n      <td>15.0</td>\n      <td>5.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>No</td>\n      <td>7.0</td>\n      <td>3.0</td>\n      <td>No</td>\n      <td>10.0</td>\n      <td>8.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>6.0</td>\n      <td>Yes</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3.0</td>\n      <td>No</td>\n      <td>7.0</td>\n      <td>3.0</td>\n      <td>No</td>\n      <td>11.0</td>\n      <td>5.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1.0</td>\n      <td>No</td>\n      <td>4.0</td>\n      <td>4.0</td>\n      <td>No</td>\n      <td>13.0</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>18519</th>\n      <td>3.0</td>\n      <td>No</td>\n      <td>7.0</td>\n      <td>3.0</td>\n      <td>No</td>\n      <td>9.0</td>\n      <td>7.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>18520</th>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>6.0</td>\n      <td>7.0</td>\n      <td>No</td>\n      <td>6.0</td>\n      <td>5.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>18521</th>\n      <td>7.0</td>\n      <td>Yes</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>Yes</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>18522</th>\n      <td>NaN</td>\n      <td>Yes</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>Yes</td>\n      <td>5.0</td>\n      <td>2.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>18523</th>\n      <td>1.0</td>\n      <td>No</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>No</td>\n      <td>4.0</td>\n      <td>7.0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>18524 rows Ã— 8 columns</p>\n</div>"},"metadata":{}}],"execution_count":56},{"cell_type":"code","source":"d=pd.read_csv('/kaggle/working/train_df')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T07:19:11.000695Z","iopub.execute_input":"2025-07-27T07:19:11.001397Z","iopub.status.idle":"2025-07-27T07:19:11.034038Z","shell.execute_reply.started":"2025-07-27T07:19:11.001359Z","shell.execute_reply":"2025-07-27T07:19:11.032614Z"}},"outputs":[],"execution_count":57},{"cell_type":"code","source":"d.drop(columns=['Unnamed: 0'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-27T07:19:39.571696Z","iopub.execute_input":"2025-07-27T07:19:39.571999Z","iopub.status.idle":"2025-07-27T07:19:39.593257Z","shell.execute_reply.started":"2025-07-27T07:19:39.571979Z","shell.execute_reply":"2025-07-27T07:19:39.592322Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":60,"output_type":"execute_result","data":{"text/plain":"       Time_spent_Alone Stage_fear  Social_event_attendance  Going_outside  \\\n0                   0.0         No                      6.0            4.0   \n1                   1.0         No                      7.0            3.0   \n2                   6.0        Yes                      1.0            0.0   \n3                   3.0         No                      7.0            3.0   \n4                   1.0         No                      4.0            4.0   \n...                 ...        ...                      ...            ...   \n18519               3.0         No                      7.0            3.0   \n18520               1.0        NaN                      6.0            7.0   \n18521               7.0        Yes                      1.0            1.0   \n18522               NaN        Yes                      1.0            0.0   \n18523               1.0         No                      8.0            6.0   \n\n      Drained_after_socializing  Friends_circle_size  Post_frequency  \\\n0                            No                 15.0             5.0   \n1                            No                 10.0             8.0   \n2                           NaN                  3.0             0.0   \n3                            No                 11.0             5.0   \n4                            No                 13.0             NaN   \n...                         ...                  ...             ...   \n18519                        No                  9.0             7.0   \n18520                        No                  6.0             5.0   \n18521                       Yes                  1.0             NaN   \n18522                       Yes                  5.0             2.0   \n18523                        No                  4.0             7.0   \n\n       Personality  \n0                1  \n1                1  \n2                0  \n3                1  \n4                1  \n...            ...  \n18519            1  \n18520            1  \n18521            0  \n18522            0  \n18523            1  \n\n[18524 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Time_spent_Alone</th>\n      <th>Stage_fear</th>\n      <th>Social_event_attendance</th>\n      <th>Going_outside</th>\n      <th>Drained_after_socializing</th>\n      <th>Friends_circle_size</th>\n      <th>Post_frequency</th>\n      <th>Personality</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.0</td>\n      <td>No</td>\n      <td>6.0</td>\n      <td>4.0</td>\n      <td>No</td>\n      <td>15.0</td>\n      <td>5.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>No</td>\n      <td>7.0</td>\n      <td>3.0</td>\n      <td>No</td>\n      <td>10.0</td>\n      <td>8.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>6.0</td>\n      <td>Yes</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3.0</td>\n      <td>No</td>\n      <td>7.0</td>\n      <td>3.0</td>\n      <td>No</td>\n      <td>11.0</td>\n      <td>5.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1.0</td>\n      <td>No</td>\n      <td>4.0</td>\n      <td>4.0</td>\n      <td>No</td>\n      <td>13.0</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>18519</th>\n      <td>3.0</td>\n      <td>No</td>\n      <td>7.0</td>\n      <td>3.0</td>\n      <td>No</td>\n      <td>9.0</td>\n      <td>7.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>18520</th>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>6.0</td>\n      <td>7.0</td>\n      <td>No</td>\n      <td>6.0</td>\n      <td>5.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>18521</th>\n      <td>7.0</td>\n      <td>Yes</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>Yes</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>18522</th>\n      <td>NaN</td>\n      <td>Yes</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>Yes</td>\n      <td>5.0</td>\n      <td>2.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>18523</th>\n      <td>1.0</td>\n      <td>No</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>No</td>\n      <td>4.0</td>\n      <td>7.0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>18524 rows Ã— 8 columns</p>\n</div>"},"metadata":{}}],"execution_count":60},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}